// Generated by CoffeeScript 1.4.0
(function() {

  A2Cribs.RentalSave = (function() {

    function RentalSave(modal) {
      modal = $('.rental-content');
      this.SetupUI();
    }

    RentalSave.prototype.SetupUI = function() {
      /*
      		********************* TODO **********************
      */
      if (!(A2Cribs.Geocoder != null)) {
        A2Cribs.Geocoder = new google.maps.Geocoder();
      }
      this.CreateGrids();
      return this.MarkerModalSetup();
    };

    RentalSave.prototype.Open = function(rental_ids) {
      /*
      		********************* TODO **********************
      */
      return this.ClearGrids();
    };

    RentalSave.prototype.Save = function() {
      var _this = this;
      return $.ajax({
        url: myBaseUrl + "rentals/Save",
        type: "POST",
        data: A2Cribs.Rental.Template,
        success: function(response) {
          response = JSON.parse(response);
          if (response.success !== null && response.success !== void 0) {
            alert("Success!");
            return console.log(response);
          } else {
            alert("Save unsuccessful");
            return console.log(response);
          }
        }
      });
    };

    RentalSave.prototype.Copy = function(rental_ids) {
      /*
      		********************* TODO (Not first priority) *
      */

    };

    RentalSave.prototype.Delete = function(listing_ids) {
      var _this = this;
      return $.ajax({
        url: myBaseUrl + "listings/Delete/" + JSON.stringify(listing_ids),
        type: "POST",
        success: function(response) {
          response = JSON.parse(response);
          if (response.success !== null && response.success !== void 0) {
            return alert("Success!");
          } else {
            alert("Delete unsuccessful");
            return console.log(response);
          }
        }
      });
    };

    RentalSave.prototype.Create = function(marker_id) {
      /*
      		********************* TODO **********************
      */
      return this.CurrentMarker = marker_id;
    };

    RentalSave.prototype.CreateSubRental = function() {
      var container, data, grid, _ref, _results;
      data = this.GridMap["overview_grid"].getData();
      data.push({});
      _ref = this.GridMap;
      _results = [];
      for (container in _ref) {
        grid = _ref[container];
        grid.updateRowCount();
        _results.push(grid.render());
      }
      return _results;
    };

    RentalSave.prototype.MarkerModalSetup = function() {
      var marker_validate, modal,
        _this = this;
      modal = $('#marker-modal');
      modal.on('show', function() {
        modal.find('#marker_add').hide();
        modal.find("#continue-button").addClass("disabled");
        return modal.find("#marker_select").val("0");
      });
      modal.on('shown', function() {
        return _this.MiniMap.Resize();
      });
      modal.find(".required").keydown(function() {
        return $(this).parent().removeClass("error");
      });
      modal.find("#University_name").focusout(function() {
        _this.FindSelectedUniversity(modal);
        if (_this.SelectedUniversity != null) {
          return _this.MiniMap.CenterMap(_this.SelectedUniversity.latitude, _this.SelectedUniversity.longitude);
        }
      });
      modal.find("#place_map_button").click(function() {
        return _this.FindAddress(modal);
      });
      modal.find("#marker_select").change(function() {
        var marker_selected;
        marker_selected = modal.find("#marker_select").val();
        if (marker_selected === "0") {
          modal.find("#continue-button").addClass("disabled");
        } else {
          modal.find("#continue-button").removeClass("disabled");
        }
        if (marker_selected === "new_marker") {
          modal.find('#marker_add').show();
          return _this.MiniMap.Resize();
        } else {
          return modal.find('#marker_add').hide();
        }
      });
      marker_validate = function() {
        var isValid;
        isValid = true;
        if (!modal.find('#Marker_street_address').val()) {
          A2Cribs.UIManager.Error("Please place your street address on the map using the Place On Map button.");
          modal.find('#Marker_street_address').parent().addClass("error");
          isValid = false;
        }
        if (!modal.find('#University_name').val()) {
          A2Cribs.UIManager.Error("You need to select a university.");
          modal.find('#University_name').parent().addClass("error");
          isValid = false;
        }
        if (modal.find('#Marker_building_type_id').val().length === 0) {
          A2Cribs.UIManager.Error("You need to select a building type.");
          modal.find('#Marker_building_type_id').parent().addClass("error");
          isValid = false;
        }
        if (modal.find('#Sublet_unit_number').val().length >= 249) {
          A2Cribs.UIManager.Error("Your unit number is too long.");
          modal.find('#Sublet_unit_number').parent().addClass("error");
          isValid = false;
        }
        if (modal.find('#Marker_alternate_name').val().length >= 249) {
          A2Cribs.UIManager.Error("Your alternate name is too long.");
          modal.find('#Marker_alternate_name').parent().addClass("error");
          isValid = false;
        }
        return isValid;
      };
      modal.find("#continue-button").click(function() {
        var marker_selected;
        marker_selected = modal.find("#marker_select").val();
        if (marker_selected === "new_marker") {
          if (marker_validate()) {
            modal.modal("hide");
            return _this.Create(1);
          }
        } else if (marker_selected !== "0") {
          modal.modal("hide");
          return _this.Create(+marker_selected);
        }
      });
      this.MiniMap = new A2Cribs.MiniMap(modal);
      if (A2Cribs.Cache.SchoolList != null) {
        modal.find("#University_name").typeahead({
          source: A2Cribs.Cache.SchoolList
        });
        return;
      }
      return $.ajax({
        url: "/University/getAll",
        success: function(response) {
          var university, _i, _len, _ref;
          A2Cribs.Cache.universitiesMap = JSON.parse(response);
          A2Cribs.Cache.SchoolList = [];
          A2Cribs.Cache.SchoolIDList = [];
          _ref = A2Cribs.Cache.universitiesMap;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            university = _ref[_i];
            A2Cribs.Cache.SchoolList.push(university.University.name);
            A2Cribs.Cache.SchoolIDList.push(university.University.id);
          }
          return modal.find("#University_name").typeahead({
            source: A2Cribs.Cache.SchoolList
          });
        }
      });
    };

    RentalSave.prototype.FindSelectedUniversity = function(div) {
      var index, selected;
      selected = div.find("#University_name").val();
      index = A2Cribs.Cache.SchoolList.indexOf(selected);
      if (index >= 0) {
        return this.SelectedUniversity = A2Cribs.Cache.universitiesMap[index].University;
      } else {
        return this.SelectedUniversity = null;
      }
    };

    RentalSave.prototype.FindAddress = function(div) {
      var address, addressObj,
        _this = this;
      if (this.SelectedUniversity != null) {
        address = div.find("#Marker_street_address").val();
        addressObj = {
          'address': address + " " + this.SelectedUniversity.city + ", " + this.SelectedUniversity.state
        };
        return A2Cribs.Geocoder.geocode(addressObj, function(response, status) {
          var component, street_name, street_number, type, _i, _j, _len, _len1, _ref, _ref1;
          if (status === google.maps.GeocoderStatus.OK && response[0].address_components.length >= 2) {
            _ref = response[0].address_components;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              component = _ref[_i];
              _ref1 = component.types;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                type = _ref1[_j];
                switch (type) {
                  case "street_number":
                    street_number = component.short_name;
                    break;
                  case "route":
                    street_name = component.short_name;
                    break;
                  case "locality":
                    div.find('#Marker_city').val(component.short_name);
                    break;
                  case "administrative_area_level_1":
                    div.find('#Marker_state').val(component.short_name);
                    break;
                  case "postal_code":
                    div.find('#Marker_zip').val(component.short_name);
                }
              }
            }
            if (!(street_number != null)) {
              A2Cribs.UIManager.Alert("Entered street address is not valid.");
              $("#Marker_street_address").text("");
              return;
            }
            _this.MiniMap.SetMarkerPosition(response[0].geometry.location);
            div.find("#Marker_street_address").val(street_number + " " + street_name);
            div.find("#Marker_latitude").val(response[0].geometry.location.lat());
            return div.find("#Marker_longitude").val(response[0].geometry.location.lng());
          }
        });
      }
    };

    RentalSave.prototype.PopulateGrid = function(rental_ids) {
      /*
      		********************* TODO **********************
      */

    };

    RentalSave.prototype.ClearGrids = function() {
      var container, data, grid, _ref, _results;
      _ref = this.GridMap;
      _results = [];
      for (container in _ref) {
        grid = _ref[container];
        data = [];
        grid.setData(data);
        _results.push(grid.render());
      }
      return _results;
    };

    RentalSave.prototype.CreateGrids = function() {
      var checkboxSelector, columnpicker, columns, container, containers, data, grid, options, _i, _len, _results;
      containers = ["overview_grid", "features_grid", "amenities_grid", "utilites_grid", "fees_grid", "description_grid"];
      this.GridMap = {};
      options = {
        editable: true,
        enableCellNavigation: true,
        asyncEditorLoading: false,
        enableAddRow: false
      };
      data = [];
      data.push({});
      _results = [];
      for (_i = 0, _len = containers.length; _i < _len; _i++) {
        container = containers[_i];
        columns = this.GetColumns(container);
        checkboxSelector = new Slick.CheckboxSelectColumn({
          cssClass: "slick-cell-checkboxsel"
        });
        columns[0] = checkboxSelector.getColumnDefinition();
        grid = new Slick.Grid("#" + container, data, columns, options);
        grid.setSelectionModel(new Slick.RowSelectionModel({
          selectActiveRow: false
        }));
        grid.registerPlugin(checkboxSelector);
        this.GridMap[container] = grid;
        _results.push(columnpicker = new Slick.Controls.ColumnPicker(columns, grid, options));
      }
      return _results;
    };

    RentalSave.prototype.GetColumns = function(container) {
      var AmenitiesColumns, DescriptionColumns, FeaturesColumns, FeesColumns, OverviewColumns, UtilitiesColumns;
      OverviewColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title"
          }, {
            id: "beds",
            name: "Beds",
            field: "beds",
            editor: Slick.Editors.Integer
          }, {
            id: "occupancy",
            name: "Occupancy",
            field: "occupancy"
          }, {
            id: "rent",
            name: "Total Rent",
            field: "rent"
          }, {
            id: "start_date",
            name: "Start Date",
            field: "start_date"
          }, {
            id: "alt_start_date",
            name: "Alt. Start Date",
            field: "alt_start_date"
          }, {
            id: "lease_length",
            name: "Lease Length",
            field: "lease_length"
          }, {
            id: "availability",
            name: "Availability",
            field: "availability"
          }
        ];
      };
      FeaturesColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title"
          }, {
            id: "baths",
            name: "Baths",
            field: "baths"
          }, {
            id: "occupancy",
            name: "A/C",
            field: "occupancy"
          }, {
            id: "rent",
            name: "Parking",
            field: "rent"
          }, {
            id: "start_date",
            name: "Spots",
            field: "start_date"
          }, {
            id: "alt_start_date",
            name: "Furnished",
            field: "alt_start_date"
          }, {
            id: "lease_length",
            name: "Pets",
            field: "lease_length"
          }, {
            id: "availability",
            name: "Smoking",
            field: "availability"
          }, {
            id: "sq_feet",
            name: "SQ Feet",
            field: "sq_feet"
          }, {
            id: "year_built",
            name: "Year Built",
            field: "year_built"
          }
        ];
      };
      AmenitiesColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title"
          }
        ];
      };
      UtilitiesColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title"
          }, {
            id: "beds",
            name: "Electricity",
            field: "beds"
          }, {
            id: "occupancy",
            name: "Water",
            field: "occupancy"
          }, {
            id: "rent",
            name: "Gas",
            field: "rent"
          }, {
            id: "start_date",
            name: "Heat",
            field: "start_date"
          }, {
            id: "alt_start_date",
            name: "Sewage",
            field: "alt_start_date"
          }, {
            id: "lease_length",
            name: "Trash",
            field: "lease_length"
          }, {
            id: "availability",
            name: "Cable",
            field: "availability"
          }, {
            id: "internet",
            name: "Internet",
            field: "internet"
          }, {
            id: "flat_rate",
            name: "Total Flat Rate",
            field: "flat_rate"
          }, {
            id: "winter_cost",
            name: "Est. Winter Utility Cost",
            field: "winter_cost"
          }, {
            id: "summer_cost",
            name: "Est. Summer Utility Cost",
            field: "summer_cost"
          }
        ];
      };
      FeesColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title"
          }, {
            id: "beds",
            name: "Deposit",
            field: "beds"
          }, {
            id: "occupancy",
            name: "Admin",
            field: "occupancy"
          }, {
            id: "rent",
            name: "Parking",
            field: "rent"
          }, {
            id: "start_date",
            name: "Furniture",
            field: "start_date"
          }, {
            id: "alt_start_date",
            name: "Pets",
            field: "alt_start_date"
          }, {
            id: "lease_length",
            name: "Amenity",
            field: "lease_length"
          }, {
            id: "availability",
            name: "Upper Floor",
            field: "availability"
          }, {
            id: "extra_occupant",
            name: "Cost for Extra Occupant",
            field: "extra_occupant"
          }, {
            id: "other_fee_description",
            name: "Other Fees",
            field: "other_fee_description"
          }, {
            id: "other_fee_cost",
            name: "Fee",
            field: "other_fee_cost"
          }
        ];
      };
      DescriptionColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title"
          }, {
            id: "beds",
            name: "Highlights",
            field: "beds"
          }, {
            id: "occupancy",
            name: "Description",
            field: "occupancy"
          }
        ];
      };
      switch (container) {
        case "overview_grid":
          return OverviewColumns();
        case "features_grid":
          return FeaturesColumns();
        case "amenities_grid":
          return AmenitiesColumns();
        case "utilites_grid":
          return UtilitiesColumns();
        case "fees_grid":
          return FeesColumns();
        case "description_grid":
          return DescriptionColumns();
      }
    };

    return RentalSave;

  })();

}).call(this);
