// Generated by CoffeeScript 1.4.0
(function() {

  A2Cribs.RentalSave = (function() {

    function RentalSave(modal) {
      modal = $('.rental-content');
      this.SetupUI();
    }

    RentalSave.prototype.SetupUI = function() {
      /*
      		********************* TODO **********************
      */
      if (!(A2Cribs.Geocoder != null)) {
        A2Cribs.Geocoder = new google.maps.Geocoder();
      }
      this.CreateGrids();
      return this.MarkerModalSetup();
    };

    RentalSave.prototype.Open = function(rental_ids) {
      /*
      		********************* TODO **********************
      */
      return this.ClearGrids();
    };

    RentalSave.prototype.Save = function() {
      var _this = this;
      return $.ajax({
        url: myBaseUrl + "rentals/Save",
        type: "POST",
        data: A2Cribs.Rental.Template,
        success: function(response) {
          response = JSON.parse(response);
          if (response.success !== null && response.success !== void 0) {
            alert("Success!");
            return console.log(response);
          } else {
            alert("Save unsuccessful");
            return console.log(response);
          }
        }
      });
    };

    RentalSave.prototype.Copy = function(rental_ids) {
      /*
      		********************* TODO (Not first priority) *
      */

    };

    RentalSave.prototype.Delete = function(listing_ids) {
      var _this = this;
      return $.ajax({
        url: myBaseUrl + "listings/Delete/" + JSON.stringify(listing_ids),
        type: "POST",
        success: function(response) {
          response = JSON.parse(response);
          if (response.success !== null && response.success !== void 0) {
            return alert("Success!");
          } else {
            alert("Delete unsuccessful");
            return console.log(response);
          }
        }
      });
    };

    RentalSave.prototype.Create = function(marker_id) {
      /*
      		********************* TODO **********************
      */
      return this.CurrentMarker = marker_id;
    };

    /*
    	Called when user adds a new row for the existing marker
    	Adds a new row to the grid, with a new row_id.
    	Sets the row_id hidden field.
    */


    RentalSave.prototype.AddNewUnit = function() {
      var container, data, grid, _ref, _results;
      data = this.GridMap["overview_grid"].getData();
      data.push({});
      _ref = this.GridMap;
      _results = [];
      for (container in _ref) {
        grid = _ref[container];
        grid.updateRowCount();
        _results.push(grid.render());
      }
      return _results;
    };

    RentalSave.prototype.MarkerModalSetup = function() {
      var clear, marker_validate, modal,
        _this = this;
      modal = $('#marker-modal');
      clear = function() {
        modal.find("input").val("");
        modal.find('select option:first-child').attr("selected", "selected");
        return _this.MiniMap.SetMarkerVisible(false);
      };
      modal.on('show', function() {
        clear();
        modal.find('#marker_add').hide();
        modal.find("#continue-button").addClass("disabled");
        return modal.find("#marker_select").val("0");
      });
      modal.on('shown', function() {
        return _this.MiniMap.Resize();
      });
      modal.find(".required").keydown(function() {
        return $(this).parent().removeClass("error");
      });
      modal.find("#University_name").focusout(function() {
        _this.FindSelectedUniversity(modal);
        if (_this.SelectedUniversity != null) {
          return _this.MiniMap.CenterMap(_this.SelectedUniversity.latitude, _this.SelectedUniversity.longitude);
        }
      });
      modal.find("#place_map_button").click(function() {
        return _this.FindAddress(modal);
      });
      modal.find("#marker_select").change(function() {
        var marker_selected;
        marker_selected = modal.find("#marker_select").val();
        if (marker_selected === "0") {
          modal.find("#continue-button").addClass("disabled");
        } else {
          modal.find("#continue-button").removeClass("disabled");
        }
        if (marker_selected === "new_marker") {
          modal.find('#marker_add').show();
          return _this.MiniMap.Resize();
        } else {
          return modal.find('#marker_add').hide();
        }
      });
      marker_validate = function() {
        var isValid;
        isValid = true;
        if (!modal.find('#Marker_street_address').val()) {
          A2Cribs.UIManager.Error("Please place your street address on the map using the Place On Map button.");
          modal.find('#Marker_street_address').parent().addClass("error");
          isValid = false;
        }
        if (!modal.find('#University_name').val()) {
          A2Cribs.UIManager.Error("You need to select a university.");
          modal.find('#University_name').parent().addClass("error");
          isValid = false;
        }
        if (modal.find('#Marker_building_type_id').val().length === 0) {
          A2Cribs.UIManager.Error("You need to select a building type.");
          modal.find('#Marker_building_type_id').parent().addClass("error");
          isValid = false;
        }
        if (modal.find('#Sublet_unit_number').val().length >= 249) {
          A2Cribs.UIManager.Error("Your unit number is too long.");
          modal.find('#Sublet_unit_number').parent().addClass("error");
          isValid = false;
        }
        if (modal.find('#Marker_alternate_name').val().length >= 249) {
          A2Cribs.UIManager.Error("Your alternate name is too long.");
          modal.find('#Marker_alternate_name').parent().addClass("error");
          isValid = false;
        }
        return isValid;
      };
      modal.find("#continue-button").click(function() {
        var marker_selected;
        marker_selected = modal.find("#marker_select").val();
        if (marker_selected === "new_marker") {
          if (marker_validate()) {
            modal.modal("hide");
            return _this.Create(1);
          }
        } else if (marker_selected !== "0") {
          modal.modal("hide");
          return _this.Create(+marker_selected);
        }
      });
      this.MiniMap = new A2Cribs.MiniMap(modal);
      if (A2Cribs.Cache.SchoolList != null) {
        modal.find("#University_name").typeahead({
          source: A2Cribs.Cache.SchoolList
        });
        return;
      }
      return $.ajax({
        url: "/University/getAll",
        success: function(response) {
          var university, _i, _len, _ref;
          A2Cribs.Cache.universitiesMap = JSON.parse(response);
          A2Cribs.Cache.SchoolList = [];
          A2Cribs.Cache.SchoolIDList = [];
          _ref = A2Cribs.Cache.universitiesMap;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            university = _ref[_i];
            A2Cribs.Cache.SchoolList.push(university.University.name);
            A2Cribs.Cache.SchoolIDList.push(university.University.id);
          }
          return modal.find("#University_name").typeahead({
            source: A2Cribs.Cache.SchoolList
          });
        }
      });
    };

    RentalSave.prototype.FindSelectedUniversity = function(div) {
      var index, selected;
      selected = div.find("#University_name").val();
      index = A2Cribs.Cache.SchoolList.indexOf(selected);
      if (index >= 0) {
        return this.SelectedUniversity = A2Cribs.Cache.universitiesMap[index].University;
      } else {
        return this.SelectedUniversity = null;
      }
    };

    RentalSave.prototype.FindAddress = function(div) {
      var address, addressObj,
        _this = this;
      if (this.SelectedUniversity != null) {
        address = div.find("#Marker_street_address").val();
        addressObj = {
          'address': address + " " + this.SelectedUniversity.city + ", " + this.SelectedUniversity.state
        };
        return A2Cribs.Geocoder.geocode(addressObj, function(response, status) {
          var component, street_name, street_number, type, _i, _j, _len, _len1, _ref, _ref1;
          if (status === google.maps.GeocoderStatus.OK && response[0].address_components.length >= 2) {
            _ref = response[0].address_components;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              component = _ref[_i];
              _ref1 = component.types;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                type = _ref1[_j];
                switch (type) {
                  case "street_number":
                    street_number = component.short_name;
                    break;
                  case "route":
                    street_name = component.short_name;
                    break;
                  case "locality":
                    div.find('#Marker_city').val(component.short_name);
                    break;
                  case "administrative_area_level_1":
                    div.find('#Marker_state').val(component.short_name);
                    break;
                  case "postal_code":
                    div.find('#Marker_zip').val(component.short_name);
                }
              }
            }
            if (!(street_number != null)) {
              A2Cribs.UIManager.Alert("Entered street address is not valid.");
              $("#Marker_street_address").text("");
              return;
            }
            _this.MiniMap.SetMarkerPosition(response[0].geometry.location);
            div.find("#Marker_street_address").val(street_number + " " + street_name);
            div.find("#Marker_latitude").val(response[0].geometry.location.lat());
            return div.find("#Marker_longitude").val(response[0].geometry.location.lng());
          }
        });
      }
    };

    RentalSave.prototype.PopulateGrid = function(rental_ids) {
      /*
      		********************* TODO **********************
      */

    };

    RentalSave.prototype.ClearGrids = function() {
      var container, data, grid, _ref, _results;
      _ref = this.GridMap;
      _results = [];
      for (container in _ref) {
        grid = _ref[container];
        data = [];
        grid.setData(data);
        _results.push(grid.render());
      }
      return _results;
    };

    RentalSave.prototype.CreateGrids = function() {
      var checkboxSelector, columnpicker, columns, container, containers, data, grid, options, _i, _len, _results;
      containers = ["overview_grid", "features_grid", "amenities_grid", "utilites_grid", "fees_grid", "description_grid"];
      this.GridMap = {};
      options = {
        editable: true,
        enableCellNavigation: true,
        asyncEditorLoading: false,
        enableAddRow: false,
        autoEdit: false
      };
      data = [];
      data.push({});
      _results = [];
      for (_i = 0, _len = containers.length; _i < _len; _i++) {
        container = containers[_i];
        columns = this.GetColumns(container);
        checkboxSelector = new Slick.CheckboxSelectColumn({
          cssClass: "slick-cell-checkboxsel"
        });
        columns[0] = checkboxSelector.getColumnDefinition();
        grid = new Slick.Grid("#" + container, data, columns, options);
        grid.setSelectionModel(new Slick.RowSelectionModel({
          selectActiveRow: false
        }));
        grid.registerPlugin(checkboxSelector);
        this.GridMap[container] = grid;
        _results.push(columnpicker = new Slick.Controls.ColumnPicker(columns, grid, options));
      }
      return _results;
    };

    RentalSave.prototype.GetColumns = function(container) {
      var AmenitiesColumns, DescriptionColumns, FeaturesColumns, FeesColumns, NumericRangeEditor, NumericRangeFormatter, OverviewColumns, UtilitiesColumns;
      NumericRangeFormatter = function(row, cell, value, columnDef, dataContext) {
        return dataContext.from + " - " + dataContext.to;
      };
      NumericRangeEditor = function(args) {
        var $from, $to,
          _this = this;
        $to = $from = null;
        this.init = function() {
          $from = $("<INPUT type=text style='width:40px' />");
          $from.appendTo(args.container);
          $from.bind("keydown", _this.handleKeyDown);
          $(args.container).append("&nbsp; to &nbsp;");
          $to = $("<INPUT type=text style='width:40px' />");
          $to.appendTo(args.container);
          $to.bind("keydown", _this.handleKeyDown);
          return _this.focus();
        };
        this.handleKeyDown = function(e) {
          if (e.keyCode === $.ui.keyCode.LEFT || e.keyCode === $.ui.keyCode.RIGHT || e.keyCode === $.ui.keyCode.TAB) {
            return e.stopImmediatePropagation();
          }
        };
        this.destroy = function() {
          return $(args.container).empty();
        };
        this.applyValue = function(item, state) {};
        this.serializeValue = function() {
          return {
            from: parseInt($from.val(), 10),
            to: parseInt($to.val(), 10)
          };
        };
        this.focus = function() {
          /*
          				$from.focus()
          */

        };
        this.loadValue = function(item) {
          $from.val(item.from);
          return $to.val(item.to);
        };
        this.isValueChanged = function() {
          return args.item.from !== parseInt($from.val(), 10) || args.item.to !== parseInt($from.val(), 10);
        };
        this.validate = function() {
          if (isNaN(parseInt($from.val(), 10)) || isNaN(parseInt($to.val(), 10))) {
            return {
              valid: false,
              msg: "Please type in valid numbers."
            };
          }
          if (parseInt($from.val(), 10) > parseInt($to.val(), 10)) {
            return {
              valid: false,
              msg: "'from' cannot be greater than 'to'"
            };
          }
          return {
            valid: true,
            msg: null
          };
        };
        return this.init();
      };
      OverviewColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title",
            editor: A2Cribs.Editors.Unit,
            formatter: A2Cribs.Formatters.Unit
          }, {
            id: "beds",
            name: "Beds",
            field: "beds",
            editor: Slick.Editors.Integer
          }, {
            id: "occupancy",
            name: "Occupancy",
            field: "occupancy",
            formatter: A2Cribs.Formatters.Range,
            editor: A2Cribs.Editors.Range
          }, {
            id: "rent",
            name: "Total Rent",
            field: "rent",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "rent_negotiable",
            name: "(Neg.)",
            field: "rent_negotiable",
            editor: Slick.Editors.Checkbox,
            formatter: Slick.Formatters.Checkmark
          }, {
            id: "start_date",
            name: "Start Date",
            field: "start_date",
            editor: Slick.Editors.Date
          }, {
            id: "alternate_start_date",
            name: "Alt. Start Date",
            field: "alternate_start_date",
            editor: Slick.Editors.Date
          }, {
            id: "end_date",
            name: "End Date",
            field: "end_date",
            editor: Slick.Editors.Date
          }, {
            id: "available",
            name: "Availability",
            field: "available",
            editor: A2Cribs.Editors.Availability
          }
        ];
      };
      FeaturesColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title",
            editor: A2Cribs.Editors.Unit,
            formatter: A2Cribs.Formatters.Unit
          }, {
            id: "baths",
            name: "Baths",
            field: "baths",
            editor: Slick.Editors.Integer
          }, {
            id: "air",
            name: "A/C",
            field: "air",
            editor: A2Cribs.Editors.AC
          }, {
            id: "parking_type",
            name: "Parking",
            field: "parking_type",
            editor: A2Cribs.Editors.Parking
          }, {
            id: "parking_spots",
            name: "Spots",
            field: "parking_spots",
            editor: Slick.Editors.Integer
          }, {
            id: "street_parking",
            name: "Street Parking",
            field: "street_parking",
            editor: Slick.Editors.Checkbox,
            formatter: Slick.Formatters.Checkmark
          }, {
            id: "furnished_type",
            name: "Furnished",
            field: "furnished_type",
            editor: A2Cribs.Editors.Furnished
          }, {
            id: "pets_type",
            name: "Pets",
            field: "pets_type",
            editor: A2Cribs.Editors.Pets
          }, {
            id: "smoking",
            name: "Smoking",
            field: "smoking",
            editor: A2Cribs.Editors.Smoking
          }, {
            id: "fridge",
            name: "Fridge",
            field: "fridge",
            editor: Slick.Editors.Checkbox,
            formatter: Slick.Formatters.Checkmark
          }, {
            id: "balcony",
            name: "Balcony",
            field: "balcony",
            editor: Slick.Editors.Checkbox,
            formatter: Slick.Formatters.Checkmark
          }, {
            id: "tv",
            name: "TV",
            field: "tv",
            editor: Slick.Editors.Checkbox,
            formatter: Slick.Formatters.Checkmark
          }, {
            id: "storage",
            name: "Storage",
            field: "storage",
            editor: Slick.Editors.Checkbox,
            formatter: Slick.Formatters.Checkmark
          }, {
            id: "square_feet",
            name: "SQ Feet",
            field: "square_feet",
            editor: Slick.Editors.Integer
          }, {
            id: "year_built",
            name: "Year Built",
            field: "year_built",
            editor: Slick.Editors.Integer
          }
        ];
      };
      AmenitiesColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title",
            editor: A2Cribs.Editors.Unit,
            formatter: A2Cribs.Formatters.Unit
          }
        ];
      };
      UtilitiesColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title",
            editor: A2Cribs.Editors.Unit,
            formatter: A2Cribs.Formatters.Unit
          }, {
            id: "electric",
            name: "Electricity",
            field: "electric",
            editor: A2Cribs.Editors.Utilities
          }, {
            id: "water",
            name: "Water",
            field: "water",
            editor: A2Cribs.Editors.Utilities
          }, {
            id: "gas",
            name: "Gas",
            field: "gas",
            editor: A2Cribs.Editors.Utilities
          }, {
            id: "heat",
            name: "Heat",
            field: "heat",
            editor: A2Cribs.Editors.Utilities
          }, {
            id: "sewage",
            name: "Sewage",
            field: "sewage",
            editor: A2Cribs.Editors.Utilities
          }, {
            id: "trash",
            name: "Trash",
            field: "trash",
            editor: A2Cribs.Editors.Utilities
          }, {
            id: "cable",
            name: "Cable",
            field: "cable",
            editor: A2Cribs.Editors.Utilities
          }, {
            id: "internet",
            name: "Internet",
            field: "internet",
            editor: A2Cribs.Editors.Utilities
          }, {
            id: "utility_total_flat_rate",
            name: "Total Flat Rate",
            field: "utility_total_flat_rate",
            editor: A2Cribs.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "utility_estimate_winter",
            name: "Est. Winter Utility Cost",
            field: "utility_estimate_winter",
            editor: A2Cribs.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "utility_estimate_summer",
            name: "Est. Summer Utility Cost",
            field: "utility_estimate_summer",
            editor: A2Cribs.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }
        ];
      };
      FeesColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title",
            editor: A2Cribs.Editors.Unit,
            formatter: A2Cribs.Formatters.Unit
          }, {
            id: "beds",
            name: "Deposit",
            field: "beds",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "occupancy",
            name: "Admin",
            field: "occupancy",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "rent",
            name: "Parking",
            field: "rent",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "start_date",
            name: "Furniture",
            field: "start_date",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "alt_start_date",
            name: "Pets",
            field: "alt_start_date",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "lease_length",
            name: "Amenity",
            field: "lease_length",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "availability",
            name: "Upper Floor",
            field: "availability",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "extra_occupant",
            name: "Cost for Extra Occupant",
            field: "extra_occupant",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }, {
            id: "other_fee_description",
            name: "Other Fees",
            field: "other_fee_description",
            editor: Slick.Editors.Text
          }, {
            id: "other_fee_cost",
            name: "Fee",
            field: "other_fee_cost",
            editor: Slick.Editors.Integer,
            formatter: A2Cribs.Formatters.Money
          }
        ];
      };
      DescriptionColumns = function() {
        var columns;
        return columns = [
          {}, {
            id: "title",
            name: "Unit/Style - Name",
            field: "title",
            editor: A2Cribs.Editors.Unit,
            formatter: A2Cribs.Formatters.Unit
          }, {
            id: "beds",
            name: "Highlights",
            field: "beds",
            editor: Slick.Editors.LongText
          }, {
            id: "occupancy",
            name: "Description",
            field: "occupancy",
            editor: Slick.Editors.LongText
          }
        ];
      };
      switch (container) {
        case "overview_grid":
          return OverviewColumns();
        case "features_grid":
          return FeaturesColumns();
        case "amenities_grid":
          return AmenitiesColumns();
        case "utilites_grid":
          return UtilitiesColumns();
        case "fees_grid":
          return FeesColumns();
        case "description_grid":
          return DescriptionColumns();
      }
    };

    return RentalSave;

  })();

}).call(this);
