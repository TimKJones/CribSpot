// Generated by CoffeeScript 1.4.0

/*
Manager class for all verify functionality
*/


(function() {

  A2Cribs.VerifyManager = (function() {

    function VerifyManager() {}

    VerifyManager.init = function() {
      this.my_verification_info = {
        'facebook_id': 1249680161
      };
      this.VerificationData = {};
      return window.fbAsyncInit = function() {
	    // init the FB JS SDK
	    FB.init({
	      appId      : '148187588666959', // App ID from the App Dashboard
	      channelUrl : 'http://localhost/channel.html', // Channel File for x-domain communication
	      status     : true, // check the login status upon init?
	      cookie     : true, // set sessions cookies to allow your server to access the session?
	      xfbml      : true  // parse XFBML tags on this page?
	    });

	    // Additional initialization code such as adding Event Listeners goes here

	  };

	  // Load the SDK's source Asynchronously
	  // Note that the debug version is being actively developed and might 
	  // contain some type checks that are overly strict. 
	  // Please report such bugs using the bugs tool.
	  (function(d, debug){
	     var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
	     if (d.getElementById(id)) {return;}
	     js = d.createElement('script'); js.id = id; js.async = true;
	     js.src = "//connect.facebook.net/en_US/all" + (debug ? "/debug" : "") + ".js";
	     ref.parentNode.insertBefore(js, ref);
	   }(document, /*debug*/ false));

	  function onLinkedInLoad() {
	    IN.Event.on(IN, "auth", onLinkedInAuth);
	  }

	  function onLinkedInAuth() {
	     IN.API.Profile("me").result(A2Cribs.FacebookManager.UpdateLinkedinLogin);
	  };
    };

    /*    
    	Returns a JQuery defered object. Example way to call the function is
    
    	@getVerificationFor(user).then (verification_info)->
    	  # Do what you want with the data
    
    	the verification info object has the following key value pairs
    	{
    		'user_id': int
    		'fb_id': int or null
    		'tw_id': int or null
    		'verified_email': bool,
    		'verificed_edu': bool,
    		'verified_fb': bool,
    		'verified_tw': bool,
    		'mutual_friends': int or null, #depends if the user is verified on fb and if you are verified on fb
    		'total_friends': int or null, #depends on if the user is verified on fb
    		'total_followers' int or null, #depends on if the user is verified ob tw
    	}
    
    	You do not need to worry about caching the data as this function already provides this functionality
    
    	Jquery deferred      http://api.jquery.com/category/deferred-object/
    */


    VerifyManager.getVerificationFor = function(user_) {
      var defered, user;
      if (!(this.VerificationData[user_.id] != null)) {
        defered = new $.Deferred();
        user = user_;
        this.VerificationData[user.id] = defered;
        $.when(this.getTotalFriends(user), this.getMutalFriends(user)).done(function(tot_friends, mut_friends) {
          var verification_info;
          verification_info = {
            'user_id': user.id,
            'fb_id': user.facebook_id,
            'verified_fb': tot_friends != null,
            'mut_friends': mut_friends,
            'tot_friends': tot_friends
          };
          return defered.resolve(verification_info);
        });
      }
      return this.VerificationData[user_.id];
    };

    VerifyManager.getMutalFriends = function(user) {
      var defered, query;
      defered = new $.Deferred();
      if ((this.my_verification_info.facebook_id != null) && (user.facebook_id != null)) {
        query = 'SELECT uid FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1 = ' + this.my_verification_info.facebook_id + ') AND uid IN (SELECT uid2 FROM friend WHERE uid1 = ' + user.facebook_id + ')';
        FB.api({
          method: 'fql.query',
          query: query
        }, function(mut_friends_res) {
          return defered.resolve(mut_friends_res.length);
        });
        return defered.promise();
      } else {
        return defered.resolve(null);
      }
    };

    VerifyManager.getTotalFriends = function(user) {
      var defered, query;
      defered = new $.Deferred();
      if (user.facebook_id != null) {
        query = 'SELECT friend_count FROM user WHERE uid = ' + user.facebook_id;
        FB.api({
          method: 'fql.query',
          query: query
        }, function(tot_friends_res) {
          return defered.resolve(parseInt(tot_friends_res[0].friend_count));
        });
        return defered.promise();
      } else {
        return defered.resolve(null);
      }
    };

    VerifyManager.samplecallback = function(fb_data) {
      return console.log(fb_data);
    };

    VerifyManager.GetTwitterFollowersCount = function(user_id) {
      var defered,
        _this = this;
      defered = new $.Deferred();
      $.ajax({
        url: myBaseUrl + "Users/GetTwitterFollowers/" + user_id,
        type: "GET",
        success: function() {
          return defered(response);
        }
      });
      return defered.promise();
    };

    VerifyManager.GetTwitterFollowersCallback = function(response) {
      return alert(response);
    };

    return VerifyManager;

  })();

}).call(this);
