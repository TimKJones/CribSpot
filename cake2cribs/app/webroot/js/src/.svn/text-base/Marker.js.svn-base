// Generated by CoffeeScript 1.4.0
(function() {

  A2Cribs.Marker = (function() {
    var FilterVisibleListings, UpdateMarkerContent;

    function Marker(MarkerId, Address, Title, UnitType, Latitude, Longitude) {
      this.MarkerId = MarkerId;
      this.Address = Address;
      this.Title = Title;
      this.UnitType = UnitType;
      this.Latitude = Latitude;
      this.Longitude = Longitude;
      this.ListingIds = null;
      this.MarkerId = parseInt(this.MarkerId);
      this.GMarker = new google.maps.Marker({
        position: new google.maps.LatLng(this.Latitude, this.Longitude),
        icon: "/img/dots/available_dot.png",
        id: this.MarkerId
      });
      this.Clicked = false;
    }

    /*
    	Add realtor and listing data to cache
    */


    Marker.CacheMarkerData = function(markerData) {
      var listings, realtor;
      realtor = markerData[1][0].Realtor;
      listings = markerData[0];
      A2Cribs.Map.CacheListings(listings);
      A2Cribs.Map.CacheRealtor(realtor);
      A2Cribs.Map.CacheMarkerIdToListingsList(listings);
      return this.Clicked = true;
    };

    /*
    	Filters the listing_ids at the current marker according to the user's current filter settings.
    	Returns list of listing_ids that should be visible in marker tooltip.
    */


    FilterVisibleListings = function(listingIdList) {
      var apt, duplex, fall, house, l, listingId, other, spring, visibleListingIds, _i, _len;
      fall = $("#fallCheck").is(':checked');
      spring = $("#springCheck").is(':checked');
      other = $("#otherCheck").is(':checked');
      house = $("#houseCheck").is(':checked');
      apt = $("#aptCheck").is(':checked');
      duplex = $("#duplexCheck").is(':checked');
      visibleListingIds = [];
      for (_i = 0, _len = listingIdList.length; _i < _len; _i++) {
        listingId = listingIdList[_i];
        l = A2Cribs.Map.IdToListingMap[listingId];
        l.Rent = parseInt(l.Rent);
        l.Beds = parseInt(l.Beds);
        if ((((l.LeaseRange === 'fall' || l.leaseRange === null) && fall) || ((l.LeaseRange === 'spring' || l.leaseRange === null) && spring) || ((l.LeaseRange === 'other' || l.leaseRange === null) && other)) && (((l.UnitType === 'house' || l.UnitType === null) && house) || ((l.UnitType === 'apt' || l.UnitType === null) && apt) || ((l.UnitType === 'duplex' || l.UnitType === null) && duplex) || (l.UnitType !== 'house' && l.UnitType !== 'duplex' && l.UnitType !== 'apt')) && ((l.Rent >= A2Cribs.FilterManager.MinRent && l.Rent <= A2Cribs.FilterManager.MaxRent) || (l.Rent === -1)) && ((l.Beds >= A2Cribs.FilterManager.MinBeds && l.Beds <= A2Cribs.FilterManager.MaxBeds) || (l.Rent === -1))) {
          visibleListingIds.push(listingId);
        }
      }
      return visibleListingIds;
    };

    /*
    	Called after successful ajax call to retrieve all listing data for a specific marker_id.
    	Updates UI with retrieved data
    */


    UpdateMarkerContent = function(markerData) {
      var visibleListingIds;
      if (!this.Clicked) {
        A2Cribs.Marker.CacheMarkerData(JSON.parse(markerData));
        A2Cribs.Map.IdToMarkerMap[this.MarkerId].GMarker.setIcon("/img/dots/clicked_dot.png");
      }
      visibleListingIds = FilterVisibleListings(A2Cribs.Map.MarkerIdToListingIdsMap[this.MarkerId]);
      return A2Cribs.Map.MarkerTooltip.Display(visibleListingIds, this.GMarker);
    };

    /*
    	Load all listing data for this marker
    	Called when a marker is clicked
    */


    Marker.prototype.LoadMarkerData = function() {
      var includeRealtor, visibleListingIds;
      includeRealtor = true;
      this.CorrectTooltipLocation();
      if (this.Clicked) {
        visibleListingIds = FilterVisibleListings(A2Cribs.Map.MarkerIdToListingIdsMap[this.MarkerId]);
        return A2Cribs.Map.MarkerTooltip.Display(visibleListingIds, this.GMarker);
      } else {
        return $.ajax({
          url: myBaseUrl + "Listings/LoadMarkerData/" + this.MarkerId + "/" + includeRealtor,
          type: "GET",
          context: this,
          success: UpdateMarkerContent
        });
      }
    };

    Marker.GetMarkerPixelCoordinates = function(latlng) {
      var map, markerLocation, nw, scale, worldCoordinate, worldCoordinateNW;
      map = A2Cribs.Map.GMap;
      scale = Math.pow(2, map.getZoom());
      nw = new google.maps.LatLng(map.getBounds().getNorthEast().lat(), map.getBounds().getSouthWest().lng());
      worldCoordinateNW = map.getProjection().fromLatLngToPoint(nw);
      worldCoordinate = map.getProjection().fromLatLngToPoint(latlng);
      markerLocation = new google.maps.Point(Math.floor((worldCoordinate.x - worldCoordinateNW.x) * scale), Math.floor((worldCoordinate.y - worldCoordinateNW.y) * scale));
      return markerLocation;
    };

    /*
    	Correct the tooltip location to fit it on the screen.
    */


    Marker.prototype.CorrectTooltipLocation = function() {
      var leftBound, markerLocation, oldX, oldY, tooltipOffset;
      leftBound = ($("#favoritesBar").css('display') === 'block') * $("#favoritesBar").width();
      if (leftBound === 0) {
        leftBound = A2Cribs.Map.Bounds.CONTROL_BOX_LEFT;
      } else {
        leftBound += A2Cribs.MarkerTooltip.Padding;
      }
      markerLocation = A2Cribs.Marker.GetMarkerPixelCoordinates(this.GMarker.position);
      tooltipOffset = {
        x: 0,
        y: 0
      };
      if (markerLocation.x + A2Cribs.MarkerTooltip.Width - A2Cribs.MarkerTooltip.ArrowOffset + A2Cribs.MarkerTooltip.Padding > A2Cribs.Map.Bounds.RIGHT) {
        tooltipOffset.x = markerLocation.x + A2Cribs.MarkerTooltip.Width - A2Cribs.MarkerTooltip.ArrowOffset + A2Cribs.MarkerTooltip.Padding - A2Cribs.Map.Bounds.RIGHT;
      }
      if (markerLocation.x - A2Cribs.MarkerTooltip.ArrowOffset - A2Cribs.MarkerTooltip.Padding < leftBound) {
        tooltipOffset.x = markerLocation.x - A2Cribs.MarkerTooltip.ArrowOffset - A2Cribs.MarkerTooltip.Padding - leftBound;
      }
      if (markerLocation.y - A2Cribs.MarkerTooltip.Height - A2Cribs.MarkerTooltip.ArrowHeight < 0) {
        tooltipOffset.y = markerLocation.y - A2Cribs.MarkerTooltip.Height - A2Cribs.MarkerTooltip.ArrowHeight;
      }
      if (markerLocation.y > A2Cribs.Map.Bounds.BOTTOM - A2Cribs.MarkerTooltip.Padding) {
        tooltipOffset.y = markerLocation.y - A2Cribs.Map.Bounds.BOTTOM + A2Cribs.MarkerTooltip.Padding;
      }
      if ((markerLocation.x + tooltipOffset.x + A2Cribs.MarkerTooltip.Width - A2Cribs.MarkerTooltip.ArrowOffset + A2Cribs.MarkerTooltip.Padding > A2Cribs.Map.Bounds.FILTER_BOX_LEFT) && (markerLocation.y + tooltipOffset.y - A2Cribs.MarkerTooltip.Height - A2Cribs.MarkerTooltip.ArrowHeight < A2Cribs.Map.Bounds.FILTER_BOX_BOTTOM)) {
        oldX = tooltipOffset.x;
        oldY = tooltipOffset.y;
        tooltipOffset.x = markerLocation.x + A2Cribs.MarkerTooltip.Width - A2Cribs.MarkerTooltip.ArrowOffset + A2Cribs.MarkerTooltip.Padding - A2Cribs.Map.Bounds.FILTER_BOX_LEFT;
        tooltipOffset.y = markerLocation.y - A2Cribs.MarkerTooltip.Height - A2Cribs.MarkerTooltip.ArrowHeight - A2Cribs.Map.Bounds.FILTER_BOX_BOTTOM;
        if (Math.abs(tooltipOffset.x) > Math.abs(tooltipOffset.y)) {
          tooltipOffset.x = oldX;
        } else {
          tooltipOffset.y = oldY;
        }
      }
      return A2Cribs.Map.GMap.panBy(tooltipOffset.x, tooltipOffset.y);
    };

    return Marker;

  })();

}).call(this);
