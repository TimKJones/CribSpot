<<<<<<< HEAD
=======
// Generated by CoffeeScript 1.6.1
>>>>>>> b8eb1b2063bb33903e07537e0ee687f85dc6ede1
(function() {

  A2Cribs.Map = (function() {

    function Map() {}

    /*
    	Called when a marker is clicked
    */

    Map.MarkerClicked = function(event) {
      return A2Cribs.Cache.IdToMarkerMap[this.id].LoadMarkerData();
    };

    /*
    	Add a marker to the map
    */

    Map.AddMarker = function(m) {
      var id;
      id = parseInt(m["marker_id"], 10);
      A2Cribs.Cache.CacheMarker(id, m);
      this.GMarkerClusterer.addMarker(A2Cribs.Cache.IdToMarkerMap[id].GMarker);
      google.maps.event.addListener(A2Cribs.Cache.IdToMarkerMap[id].GMarker, 'click', this.MarkerClicked);
      return A2Cribs.Cache.AddressToMarkerIdMap[m.address] = parseInt(m.marker_id);
    };

    /*
    	Add all markers in markerList to map
    */

    Map.InitializeMarkers = function(markerList) {
      var decodedMarkerList, marker, _i, _len, _results;
      decodedMarkerList = JSON.parse(markerList);
      _results = [];
      for (_i = 0, _len = decodedMarkerList.length; _i < _len; _i++) {
        marker = decodedMarkerList[_i];
        _results.push(this.AddMarker(marker["Marker"]));
      }
      return _results;
    };

    /*
    	Load all markers from Markers table
    */

    Map.LoadMarkers = function() {
      return $.ajax({
        url: myBaseUrl + "Map/LoadMarkers/" + A2Cribs.Map.CurentSchoolId,
        type: "GET",
        context: this,
        success: this.InitializeMarkers
      });
      /*defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(42.23472,-83.846283), new google.maps.LatLng(42.33322,-83.627243))
      		input = $("#addressSearchBar")[0]
      		options = 
      			bounds: defaultBounds
      		@AutoComplete = new google.maps.places.Autocomplete(input, options)
      		@AutoComplete.setBounds(defaultBounds)
      */
    };

    /*
    	Used to only show markers that are within a certain bounds based on the user's current viewport.
    	https://developers.google.com/maps/articles/toomanymarkers#viewportmarkermanagement
    */

    Map.ShowMarkers = function() {
      var bounds;
      return bounds = A2Cribs.Map.GMap.getBounds();
    };

    Map.InitBoundaries = function() {
      return this.Bounds = {
        LEFT: 0,
        RIGHT: window.innerWidth,
        BOTTOM: window.innerHeight,
        TOP: 0,
        FILTER_BOX_LEFT: A2Cribs.UtilityFunctions.getPosition($("#filterBoxBackground")[0]).x,
        FILTER_BOX_BOTTOM: A2Cribs.UtilityFunctions.getPosition($("#filterBoxBackground")[0]).y + $("#filterBoxBackground").height(),
        CONTROL_BOX_LEFT: 95
      };
    };

    Map.Init = function(school_id, latitude, longitude) {
      var mcOptions, style;
      this.CurentSchoolId = school_id;
      this.MapCenter = new google.maps.LatLng(latitude, longitude);
      style = [
        {
          "featureType": "landscape",
          "stylers": [
            {
              "hue": "#005eff"
            }
          ]
        }, {
          "featureType": "road",
          "stylers": [
            {
              "hue": "#00ff19"
            }
          ]
        }, {
          "featureType": "water",
          "stylers": [
            {
              "saturation": 99
            }
          ]
        }, {
          "featureType": "poi",
          "stylers": [
            {
              "hue": "#0044ff"
            }, {
              "lightness": 32
            }
          ]
        }
      ];
      this.MapOptions = {
        zoom: 15,
        center: A2Cribs.Map.MapCenter,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        styles: style,
        panControl: false,
        streetViewControl: false,
        mapTypeControl: false
      };
      A2Cribs.Map.GMap = new google.maps.Map(document.getElementById('map_canvas'), A2Cribs.Map.MapOptions);
      google.maps.event.addListener(A2Cribs.Map.GMap, 'idle', A2Cribs.Map.ShowMarkers);
      mcOptions = {
        gridSize: 60,
        maxZoom: 15
      };
      this.GMarkerClusterer = new MarkerClusterer(A2Cribs.Map.GMap, [], mcOptions);
      this.GMarkerClusterer.ignoreHidden_ = true;
      this.LoadMarkers();
      this.LoadTypeTables();
      this.MarkerTooltip = new A2Cribs.MarkerTooltip(this.GMap);
      A2Cribs.FilterManager.InitAddressSearch();
      A2Cribs.Map.InitBoundaries();
      return A2Cribs.MarkerTooltip.Init();
    };

    Map.LoadTypeTables = function() {
      return $.ajax({
        url: myBaseUrl + "Map/LoadTypeTables",
        type: "POST",
        success: this.LoadTypeTablesCallback
      });
    };

    Map.LoadTypeTablesCallback = function(types) {
      var bathrooms, buildings, type, _i, _j, _len, _len2, _results;
      types = JSON.parse(types);
      buildings = types[0];
      bathrooms = types[1];
      for (_i = 0, _len = buildings.length; _i < _len; _i++) {
        type = buildings[_i];
        A2Cribs.Cache.BuildingIdToNameMap[parseInt(type.BuildingType.id)] = type.BuildingType.name;
      }
      _results = [];
      for (_j = 0, _len2 = bathrooms.length; _j < _len2; _j++) {
        type = bathrooms[_j];
        _results.push(A2Cribs.Cache.BathroomIdToNameMap[parseInt(type.BathroomType.id)] = type.BathroomType.name);
      }
      return _results;
    };

    /*
    	EVAN:
    		marker_id is the id of the marker to open
    		sublet_data is an object containing all the data needed to populate a tooltip
    */

    Map.OpenMarker = function(marker_id, sublet_data) {
      if (marker_id === -1) {
        alert("This listing either has been removed or is invalid.");
        return;
      }
      if (marker_id === -2) return;
      return alert(marker_id);
    };

    return Map;

  })();

}).call(this);
