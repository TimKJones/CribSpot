// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    return $.fn.removeStyle = function(style) {
      var search;
      search = new RegExp(style + '[^;]+;?', 'g');
      return this.each(function() {
        return $(this).attr('style', function(i, style) {
          if (style) {
            return style.replace(search, '');
          }
        });
      });
    };
  })(jQuery);

  A2Cribs.Hotlist = (function() {
    Hotlist.Initialize = function() {
      var el;
      el = $('#hotlist');
      A2Cribs.HotlistObj = new A2Cribs.Hotlist(el);
      return A2Cribs.HotlistObj.setup();
    };

    Hotlist.prototype.call = function(action, method, data) {
      var deferred, url,
        _this = this;
      deferred = new $.Deferred();
      url = myBaseUrl + action;
      $.ajax({
        url: url,
        data: data,
        type: method,
        success: function(response) {
          return deferred.resolve(JSON.parse(response));
        },
        error: function(response) {
          return deferred.reject(response);
        }
      });
      return deferred.promise();
    };

    function Hotlist(DOMRoot) {
      this.DOMRoot = DOMRoot;
      this.topSection = _.template(A2Cribs.Hotlist.topSectionTemplate);
      this.friendsList = _.template(A2Cribs.Hotlist.friendsListTemplate);
      this.friendsListPopup = _.template(A2Cribs.Hotlist.friendsListPopupTemplate);
      this.expandButton = _.template(A2Cribs.Hotlist.expandButtonTemplate);
      this.currentHotlist = this.get();
      this.sources = [
        {
          name: 'test',
          local: ['hello', 'hellotest', 'hellotest2', 'hellotest3', 'hellotest4']
        }, {
          name: 'accounts',
          remote: {
            url: myBaseUrl + 'users/getbyname?name=%QUERY',
            filter: function(response) {
              return response.map(function(item) {
                var datum;
                datum = {
                  value: "" + item.User.email,
                  name: "" + item.User.first_name + " " + item.User.last_name
                };
                return datum;
              });
            }
          }
        }
      ];
      this.setEditing(false);
      this.isExpanded = false;
    }

    Hotlist.prototype.setup = function() {
      this.renderTopSection();
      this.show();
      this.renderBottomSection();
      return A2Cribs.FeaturedListings.resizeHandler();
    };

    Hotlist.prototype.renderTopSection = function() {
      this.DOMRoot.find('#top-section').html(this.topSection());
      this.DOMRoot.find('#title').show();
      this.DOMRoot.find('#add-field').hide();
      this.DOMRoot.find('#btn-add').hide();
      this.DOMRoot.find('#add-field').typeahead(this.sources);
      return this.DOMRoot.find('.twitter-typeahead').hide();
    };

    Hotlist.prototype.renderFriendsList = function(data) {
      this.DOMRoot.find('#friends').html(this.friendsList(data));
      this.DOMRoot.find('#add-field').val("");
      this.DOMRoot.find('.btn-hotlist-remove').hide();
      this.DOMRoot.find('li.friend span').tooltip();
      this.DOMRoot.find('.friend-name').hide();
      this.DOMRoot.find('li.friend').droppable({
        accept: '.fl-sb-item, .large-bubble',
        hoverClass: 'drop-hover',
        tolerance: 'pointer',
        drop: function(event, ui) {
          console.log("shared", $(this).data('id'), ui.draggable.attr('listing_id') || ui.draggable.data('listing_id'));
          return ui.helper.hide();
        }
      });
      this.DOMRoot.find('#share-all').droppable({
        accept: '.fl-sb-item, .large-bubble',
        activeClass: 'drop-active',
        hoverClass: 'drop-hover',
        tolerance: 'pointer',
        drop: function(event, ui) {
          console.log("shared to all", ui.draggable.attr('listing_id') || ui.draggable.data('listing_id'));
          return ui.helper.hide();
        }
      });
      return this.showOrHideExpandArrow();
    };

    Hotlist.prototype.showOrHideExpandArrow = function() {
      var el, hotlistOnOneLine;
      el = this.DOMRoot.find('#bottom-section a');
      hotlistOnOneLine = this.DOMRoot.find('ul.friends li:first').offset().top === this.DOMRoot.find('ul.friends li:last').offset().top;
      if (this.isExpanded || !hotlistOnOneLine) {
        return el.show();
      } else {
        return el.hide();
      }
    };

    Hotlist.prototype.renderBottomSection = function() {
      return this.DOMRoot.find('#bottom-section').html(this.expandButton());
    };

    Hotlist.prototype.getHotlistForPopup = function(listing_id) {
      return this.friendsListPopup({
        friends: this.currentHotlist,
        listing_id: listing_id
      });
    };

    Hotlist.prototype.get = function() {
      var _this = this;
      return $.when(this.call('friends/hotlist', 'GET', null)).then(function(data) {
        return _this.currentHotlist = data;
      }).fail(function(data) {
        return console.log("ERROR in A2Cribs.HotlistObj.get(): ", data);
      });
    };

    Hotlist.prototype.show = function() {
      var _this = this;
      return $.when(this.call('friends/hotlist', 'GET', null)).then(function(data) {
        return _this.renderFriendsList({
          friends: data
        });
      }).fail(function(data) {
        return console.log("ERROR in A2Cribs.HotlistObj.show(): ", data);
      });
    };

    Hotlist.prototype.add = function(friend) {
      var _this = this;
      return $.when(this.call('invitations/invitefriends', 'POST', {
        emails: [friend]
      }).then(function(data) {
        return _this.call('friends/hotlist', 'GET', null);
      }).then(function(data) {
        _this.currentHotlist = data;
        _this.renderFriendsList({
          friends: data
        });
        return _this.expandForEdit();
      }).fail(function(data) {
        return console.log("ERROR: " + data);
      }));
    };

    Hotlist.prototype.remove = function(friend) {
      var _this = this;
      return $.when(this.call('friends/hotlist/remove', 'POST', {
        friend: friend
      }).then(function(data) {
        _this.renderFriendsList({
          friends: data
        });
        _this.expandForEdit();
        return _this.currentHotlist = data;
      }).fail(function(data) {
        return console.log("ERROR: " + data);
      }));
    };

    Hotlist.prototype.share = function(listing, friend) {
      var _this = this;
      console.log("sharing", listing, friend);
      return $.when(this.call('friends/share', 'POST', {
        friend: friend,
        listing: listing
      }).then(function(data) {
        if (data.success === true) {
          return A2Cribs.UIManager.Success();
        } else {
          return A2Cribs.UIManager.Error();
        }
      }).fail(function(data) {
        return A2Cribs.UIManager.Error();
      }).always(function(data, status, jqXHR) {
        return console.log(data);
      }));
    };

    Hotlist.prototype.retract = function() {
      var hides, shows;
      shows = ['.friend-abbr', '#title'];
      hides = ['.btn-hotlist-remove', '.friend-name', '#add-field', '.twitter-typeahead', '#btn-add'];
      this.DOMRoot.removeClass('expanded').removeClass('detailed');
      this.DOMRoot.find('#expand-button i').removeClass('icon-caret-up').addClass('icon-caret-down');
      this.DOMRoot.find(shows.join(',')).show();
      this.DOMRoot.find(hides.join(',')).hide();
      this.DOMRoot.find('#btn-edit').removeClass('editing').html('<i class="icon-edit"></i>');
      this.DOMRoot.find('ul.friends').removeStyle('height');
      this.setEditing(false);
      this.isExpanded = false;
      return this.showOrHideExpandArrow();
    };

    Hotlist.prototype.expand = function() {
      this.DOMRoot.addClass('expanded');
      this.DOMRoot.find('#expand-button i').removeClass('icon-caret-down').addClass('icon-caret-up');
      this.isExpanded = true;
      this.showOrHideExpandArrow();
      return this.setHeight();
    };

    Hotlist.prototype.expandForEdit = function() {
      var hides, shows;
      this.DOMRoot.addClass('expanded');
      this.DOMRoot.find('#expand-button i').removeClass('icon-caret-down').addClass('icon-caret-up');
      this.isExpanded = true;
      this.showOrHideExpandArrow();
      this.DOMRoot.addClass('detailed');
      this.setHeight();
      shows = ['.btn-hotlist-remove', '.twitter-typeahead', '.friend-name', '#add-field', '#btn-add'];
      hides = ['.friend-abbr', '#title'];
      this.DOMRoot.find(shows.join(',')).show();
      this.DOMRoot.find(hides.join(',')).hide();
      return this.DOMRoot.find('#btn-edit').addClass('editing').html('Done');
    };

    Hotlist.prototype.setHeight = function() {
      var a, height;
      a = this.DOMRoot.find('ul.friends li:last-child');
      height = a.offset().top + a.height() - $('ul.friends').offset().top + 30;
      if (height < 300) {
        return this.DOMRoot.find('ul.friends').height(height);
      }
    };

    Hotlist.prototype.toggleEdit = function() {
      if (this.isEditing()) {
        this.setEditing(false);
        return this.retract();
      } else {
        this.setEditing(true);
        return this.expandForEdit();
      }
    };

    Hotlist.prototype.toggleExpand = function() {
      if ($('#hotlist').hasClass('expanded')) {
        return this.retract();
      } else {
        return this.expand(false);
      }
    };

    Hotlist.prototype.isEditing = function() {
      return this.DOMRoot.hasClass('editing');
    };

    Hotlist.prototype.setEditing = function(state) {
      if (state) {
        return this.DOMRoot.addClass('editing');
      } else {
        return this.DOMRoot.removeClass('editing');
      }
    };

    Hotlist.friendsListPopupTemplate = "<ul class=\"friends-popup\">\n  <% _.each(friends, function(elem, idx, list) { %>\n    <li>\n      <a href='#' onclick='A2Cribs.HotlistObj.share(<%=listing_id%>, <%=elem.id%>)'><%=elem.first_name%> <%=elem.last_name%></a>\n    </li>\n  <% }) %>\n</ul>";

    Hotlist.topSectionTemplate = "<div id='share-all'>\n  <span class='title'>Hotlist</span>\n  <span class='share-text'>Share to All</span>\n</div>\n<input class='typeahead' type='text' autocomplete='off' id='add-field'></input>\n<div id='buttons' class='pull-right'>\n  <a href='#' data-toggle='popover' id='btn-add' class='btn-hotlist btn-hotlist-add' onClick=\"A2Cribs.HotlistObj.add($('#add-field').val())\">+</a>\n  <a href='#' id='btn-edit' class='btn-hotlist btn-hotlist-edit' onClick='A2Cribs.HotlistObj.toggleEdit()'><i class='icon-edit'></i></a>\n</div>";

    Hotlist.friendsListTemplate = "<ul class='friends'>\n  <% _.each(friends, function(elem, idx, list) { %>\n    <li class='friend' data-id='<%=elem.id%>'>\n      <% if (typeof elem.first_name !== 'undefined' && elem.first_name !== null) { %>\n        <span class='friend-abbr' data-toggle='tooltip' title='<%=elem.first_name%> <%=elem.last_name%>'>\n          <%=elem.first_name[0].toUpperCase()%><%=elem.last_name[0].toUpperCase()%> \n        </span>\n      <% } else { %>\n        <span class='friend-abbr' data-toggle='tooltip' title='<%=elem.email%>'>\n          <%=elem.email[0]%>@<%=elem.email.split('@')[1][0]%>\n        </span>\n      <% } %>\n      <span class='friend-name'>\n        <% if (typeof elem.first_name !== 'undefined' && elem.first_name !== null) { %>\n          <%=elem.first_name%> <%=elem.last_name%> \n        <% } else { %>\n          <%=elem.email%> \n        <% } %>\n      </span>\n      <a class='btn-hotlist-remove btn-hotlist pull-right' href='#' onClick='A2Cribs.HotlistObj.remove(<%=elem.id%>)'><i class='icon icon-remove-circle'></i></a>\n    </li>\n  <% }); %>\n</ul>";

    Hotlist.expandButtonTemplate = "<a href='#' onclick='A2Cribs.HotlistObj.toggleExpand()' id='expand-button'><i class='icon icon-caret-down'></i></a>";

    return Hotlist;

  })();

}).call(this);
